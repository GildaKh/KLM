{"paragraphs":[{"title":"Booking Data Processing ","text":"//replace null with empty string and convert values to lowercase for easier comparison later on\r\n\r\nval safeString: String => String = s => if (s == null) \"\" else s\r\nval udfSafeString = udf(safeString)","user":"anonymous","dateUpdated":"2019-07-11T14:38:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1562705099965_1348809982","id":"20190709-204459_1726041583","dateCreated":"2019-07-09T20:44:59+0000","dateStarted":"2019-07-11T14:38:06+0000","dateFinished":"2019-07-11T14:38:07+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:953"},{"title":"Validate Booking HDFS URL","text":"   def urlExist( url:String ) : Boolean = {\r\n    val conf = sc.hadoopConfiguration\r\n    val fs = org.apache.hadoop.fs.FileSystem.get(conf)\r\n    return fs.exists(new org.apache.hadoop.fs.Path(url))\r\n   }    \r\n   \r\n //urlExist(\"/user/maria_dev/KLM/Booking/booking.dat\");","user":"anonymous","dateUpdated":"2019-07-11T14:38:07+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1562705144896_-1470131150","id":"20190709-204544_1794846175","dateCreated":"2019-07-09T20:45:44+0000","dateStarted":"2019-07-11T14:38:08+0000","dateFinished":"2019-07-11T14:38:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:954"},{"title":"Create DataFrame from JSON Data","text":"4\r\nimport org.apache.spark.sql.functions \r\n\r\ndef GetBookingDataFrame(url:String) : org.apache.spark.sql.DataFrame = {\r\n    if(urlExist(url))\r\n    {\r\n         val df = sqlContext.read.option(\"charset\", \"UTF-8E\").json(url).toDF()\r\n        //df.printSchema();\r\n        //df.show()\r\n    \r\n        //fetch required columns\r\n        val details = df.withColumn(\"nbPassengers\", $\"event.DataElement.travelrecord.productsList.nbPassengers\")\r\n                .withColumn(\"age\", $\"event.DataElement.travelrecord.passengersList.age\")\r\n                .withColumn(\"passengerType\", $\"event.DataElement.travelrecord.passengersList.passengerType\")\r\n                .withColumn(\"bookingStatus\", $\"event.DataElement.travelrecord.productsList.bookingStatus\")\r\n                .withColumn(\"operatingAirline\", $\"event.DataElement.travelrecord.productsList.flight.operatingAirline\")\r\n                .withColumn(\"originAirport\", $\"event.DataElement.travelrecord.productsList.flight.originAirport\")\r\n                .withColumn(\"destinationAirport\", $\"event.DataElement.travelrecord.productsList.flight.destinationAirport\")\r\n                .withColumn(\"departureDate\", $\"event.DataElement.travelrecord.productsList.flight.departureDate\")\r\n                .withColumn(\"arrivalDate\", $\"event.DataElement.travelrecord.productsList.flight.arrivalDate\").drop(\"event\")\r\n                \r\n        \r\n        //split array columns into separate columns\r\n        val booking = details.withColumn(\"temp\", col(\"nbPassengers\")).select(\r\n                col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"nbPassengers$i\")): _*\r\n            ).withColumn(\"temp\", col(\"bookingStatus\")).select(\r\n                col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"bookingStatus$i\")): _*\r\n            ).withColumn(\"temp\", col(\"operatingAirline\")).select(\r\n                 col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"operatingAirline$i\")): _*\r\n            ).withColumn(\"temp\", col(\"originAirport\")).select(\r\n                 col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"originAirport$i\")): _*\r\n            ).withColumn(\"temp\", col(\"departureDate\")).select(\r\n                 col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"departureDate$i\")): _*\r\n            ).withColumn(\"temp\", col(\"arrivalDate\")).select(\r\n                 col(\"*\") +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"arrivalDate$i\")): _*\r\n            ).withColumn(\"temp\", col(\"destinationAirport\")).select(\r\n                 col(\"nbPassengers0\") +:col(\"nbPassengers1\") +:col(\"bookingStatus0\") +:col(\"bookingStatus1\") +:col(\"operatingAirline0\") +:col(\"operatingAirline1\") +:col(\"originAirport0\") +:\r\n                 col(\"originAirport1\") +:col(\"departureDate0\") +:col(\"departureDate1\") +:col(\"arrivalDate0\") +:col(\"arrivalDate1\")\r\n                  +:(0 until 2).map(i => udfSafeString(col(\"temp\").getItem(i)).as(s\"destinationAirport$i\")): _*\r\n            )\r\n        \r\n        //Break each two ways booking to 2 separate rows\r\n        val finalDF = booking\r\n          .rdd\r\n          .flatMap(row => {\r\n            val nbPassengers0 = row.getString(0)\r\n            val bookingStatus0 = row.getString(2).toLowerCase\r\n            val operatingAirline0 = row.getString(4).toLowerCase\r\n            val originAirport0 = row.getString(6).toLowerCase\r\n            val departureDate0 = row.getString(8)\r\n            val arrivalDate0 = row.getString(10)\r\n            val destinationAirport0 = row.getString(12).toLowerCase\r\n            \r\n        \r\n            val nbPassengers1 = row.getString(1)\r\n            val bookingStatus1 = row.getString(3).toLowerCase\r\n            val operatingAirline1 = row.getString(5).toLowerCase\r\n            val originAirport1 = row.getString(7).toLowerCase\r\n            val departureDate1 = row.getString(9)\r\n            val arrivalDate1 = row.getString(11)\r\n            val destinationAirport1 = row.getString(13).toLowerCase\r\n    \r\n        \r\n            List(\r\n              (nbPassengers0, operatingAirline0, bookingStatus0, originAirport0, destinationAirport0, departureDate0, arrivalDate0),\r\n              (nbPassengers1, operatingAirline1, bookingStatus1, originAirport1, destinationAirport1, departureDate1, arrivalDate1)\r\n            )\r\n          })\r\n          .toDF(\"nbPassengers\", \"operatingAirline\", \"bookingStatus\", \"originAirport\", \"destinationAirport\", \"departureDate\", \"arrivalDate\")\r\n        \r\n        \r\n        return finalDF;\r\n          \r\n    }\r\n    else\r\n    {\r\n         throw new Exception(\"Invalid URL\")\r\n    }\r\n}\r\n                \r\n","user":"anonymous","dateUpdated":"2019-07-11T14:38:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1562705173637_695935592","id":"20190709-204613_1494811918","dateCreated":"2019-07-09T20:46:13+0000","dateStarted":"2019-07-11T14:38:09+0000","dateFinished":"2019-07-11T14:38:11+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:955"},{"text":"import org.apache.spark.sql.functions._\n\nvar bookingDF = GetBookingDataFrame(\"hdfs:///user/maria_dev/KLM/booking.dat\")\nbookingDF.show()\n\n//bookingDF.printSchema\n\n\nbookingDF.registerTempTable(\"bookings\")","user":"anonymous","dateUpdated":"2019-07-11T14:38:11+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://sandbox-hdp.hortonworks.com:4040/jobs/job?id=1","http://sandbox-hdp.hortonworks.com:4040/jobs/job?id=2"],"interpreterSettingId":"spark2"}},"apps":[],"jobName":"paragraph_1562705214727_-1108327315","id":"20190709-204654_288618930","dateCreated":"2019-07-09T20:46:54+0000","dateStarted":"2019-07-11T14:38:12+0000","dateFinished":"2019-07-11T14:38:21+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:956"}],"name":"/KLM/Booking","id":"2EEYFTMTR","noteParams":{},"noteForms":{},"angularObjects":{"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}